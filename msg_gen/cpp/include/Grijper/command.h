/* Auto-generated by genmsg_cpp for file /home/stijn/ros/Grijper/msg/command.msg */
#ifndef GRIJPER_MESSAGE_COMMAND_H
#define GRIJPER_MESSAGE_COMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Grijper
{
template <class ContainerAllocator>
struct command_ {
  typedef command_<ContainerAllocator> Type;

  command_()
  : cmd()
  , force(0.0)
  {
  }

  command_(const ContainerAllocator& _alloc)
  : cmd(_alloc)
  , force(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  cmd;

  typedef float _force_type;
  float force;


  typedef boost::shared_ptr< ::Grijper::command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Grijper::command_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct command
typedef  ::Grijper::command_<std::allocator<void> > command;

typedef boost::shared_ptr< ::Grijper::command> commandPtr;
typedef boost::shared_ptr< ::Grijper::command const> commandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Grijper::command_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Grijper::command_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Grijper

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Grijper::command_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Grijper::command_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Grijper::command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb00b428ff12135fc9b18d757044344c";
  }

  static const char* value(const  ::Grijper::command_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb00b428ff12135fULL;
  static const uint64_t static_value2 = 0xc9b18d757044344cULL;
};

template<class ContainerAllocator>
struct DataType< ::Grijper::command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Grijper/command";
  }

  static const char* value(const  ::Grijper::command_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Grijper::command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string cmd\n\
float32 force\n\
";
  }

  static const char* value(const  ::Grijper::command_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Grijper::command_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cmd);
    stream.next(m.force);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct command_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Grijper::command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Grijper::command_<ContainerAllocator> & v) 
  {
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd);
    s << indent << "force: ";
    Printer<float>::stream(s, indent + "  ", v.force);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GRIJPER_MESSAGE_COMMAND_H

