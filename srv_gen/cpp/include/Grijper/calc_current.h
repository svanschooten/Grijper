/* Auto-generated by genmsg_cpp for file /home/kreuk/ros/Grijper/srv/calc_current.srv */
#ifndef GRIJPER_SERVICE_CALC_CURRENT_H
#define GRIJPER_SERVICE_CALC_CURRENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace Grijper
{
template <class ContainerAllocator>
struct calc_currentRequest_ {
  typedef calc_currentRequest_<ContainerAllocator> Type;

  calc_currentRequest_()
  : force(0.0)
  {
  }

  calc_currentRequest_(const ContainerAllocator& _alloc)
  : force(0.0)
  {
  }

  typedef float _force_type;
  float force;


  typedef boost::shared_ptr< ::Grijper::calc_currentRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Grijper::calc_currentRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct calc_currentRequest
typedef  ::Grijper::calc_currentRequest_<std::allocator<void> > calc_currentRequest;

typedef boost::shared_ptr< ::Grijper::calc_currentRequest> calc_currentRequestPtr;
typedef boost::shared_ptr< ::Grijper::calc_currentRequest const> calc_currentRequestConstPtr;



template <class ContainerAllocator>
struct calc_currentResponse_ {
  typedef calc_currentResponse_<ContainerAllocator> Type;

  calc_currentResponse_()
  : current(0.0)
  {
  }

  calc_currentResponse_(const ContainerAllocator& _alloc)
  : current(0.0)
  {
  }

  typedef float _current_type;
  float current;


  typedef boost::shared_ptr< ::Grijper::calc_currentResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Grijper::calc_currentResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct calc_currentResponse
typedef  ::Grijper::calc_currentResponse_<std::allocator<void> > calc_currentResponse;

typedef boost::shared_ptr< ::Grijper::calc_currentResponse> calc_currentResponsePtr;
typedef boost::shared_ptr< ::Grijper::calc_currentResponse const> calc_currentResponseConstPtr;


struct calc_current
{

typedef calc_currentRequest Request;
typedef calc_currentResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct calc_current
} // namespace Grijper

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Grijper::calc_currentRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Grijper::calc_currentRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Grijper::calc_currentRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "14325717affaa8b2646515cff2e01241";
  }

  static const char* value(const  ::Grijper::calc_currentRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x14325717affaa8b2ULL;
  static const uint64_t static_value2 = 0x646515cff2e01241ULL;
};

template<class ContainerAllocator>
struct DataType< ::Grijper::calc_currentRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Grijper/calc_currentRequest";
  }

  static const char* value(const  ::Grijper::calc_currentRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Grijper::calc_currentRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 force\n\
\n\
";
  }

  static const char* value(const  ::Grijper::calc_currentRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Grijper::calc_currentRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Grijper::calc_currentResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Grijper::calc_currentResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Grijper::calc_currentResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "05ca39fc5294a10cd65b9f841aeb4df0";
  }

  static const char* value(const  ::Grijper::calc_currentResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x05ca39fc5294a10cULL;
  static const uint64_t static_value2 = 0xd65b9f841aeb4df0ULL;
};

template<class ContainerAllocator>
struct DataType< ::Grijper::calc_currentResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Grijper/calc_currentResponse";
  }

  static const char* value(const  ::Grijper::calc_currentResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Grijper::calc_currentResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 current\n\
\n\
";
  }

  static const char* value(const  ::Grijper::calc_currentResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Grijper::calc_currentResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Grijper::calc_currentRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.force);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct calc_currentRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Grijper::calc_currentResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.current);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct calc_currentResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<Grijper::calc_current> {
  static const char* value() 
  {
    return "f771e9c5b395c0bb901fe202ea623a90";
  }

  static const char* value(const Grijper::calc_current&) { return value(); } 
};

template<>
struct DataType<Grijper::calc_current> {
  static const char* value() 
  {
    return "Grijper/calc_current";
  }

  static const char* value(const Grijper::calc_current&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Grijper::calc_currentRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f771e9c5b395c0bb901fe202ea623a90";
  }

  static const char* value(const Grijper::calc_currentRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Grijper::calc_currentRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Grijper/calc_current";
  }

  static const char* value(const Grijper::calc_currentRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Grijper::calc_currentResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f771e9c5b395c0bb901fe202ea623a90";
  }

  static const char* value(const Grijper::calc_currentResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Grijper::calc_currentResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Grijper/calc_current";
  }

  static const char* value(const Grijper::calc_currentResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // GRIJPER_SERVICE_CALC_CURRENT_H

